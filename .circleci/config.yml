version: 2
jobs:
  test:
    docker: 
      - image: igorxp5/applada-api:latest
        name: applada-api
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: kartoza/postgis
        name: applada-db
        environment:
          POSTGRES_DB: applada
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - run: 
          name: Installing dependencies
          command: pip install -r requirements.txt
      - run: 
          name: Waiting Database service start
          command: /bin/wait-for applada-db:5432
      - run: 
          name: Running tests
          command: python manage.py test -d --noinput api_v1/tests/*
        
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - run: 
          name: Installing semver
          command: |
            git clone https://github.com/fsaintjacques/semver-tool /semver-tool
            mv /semver-tool/src/semver /bin/semver
            chmod +x /bin/semver
      - checkout
      - run:
          name: 'Getting commit type'
          command: |
            export COMMIT_MESSAGE=$(git show --pretty='format:%s' --no-patch $CIRCLE_SHA1)
            export COMMIT_TYPE=$(echo $COMMIT_MESSAGE | grep -o ".*:" | head -1 | sed 's/.$//')
            echo "export COMMIT_TYPE=$COMMIT_TYPE" >> $BASH_ENV
            echo Commit type: $COMMIT_TYPE
      - run:
          name: 'Getting current version'
          command: |
            CURRENT_VERSION=$(git tag | tail -1 | sed 's/^v//')
            echo "export CURRENT_VERSION=$CURRENT_VERSION" >> $BASH_ENV
            echo Current version: $CURRENT_VERSION
      - run:
          name: 'Getting current release name'
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              CURRENT_RELEASE_NAME="release"
            else
              CURRENT_RELEASE_NAME="debug"
            fi;
            echo "export CURRENT_RELEASE_NAME=$CURRENT_RELEASE_NAME" >> $BASH_ENV
            echo Current release name: $CURRENT_RELEASE_NAME
      - run:
          name: 'Building next name version'
          command: |
            if [ "$CURRENT_RELEASE_NAME" = "release" ]; then
              NEXT_NAME_VERSION="$CURRENT_VERSION"
            elif [ "$COMMIT_TYPE" = "FEAT" ]; then
              NEXT_NAME_VERSION=$(semver bump minor $CURRENT_VERSION)
            else
              NEXT_NAME_VERSION=$(semver bump patch $CURRENT_VERSION)
            fi;
            NEXT_NAME_VERSION=$(semver bump prerel $CURRENT_RELEASE_NAME $NEXT_NAME_VERSION)
            NEXT_NAME_VERSION="v$NEXT_NAME_VERSION"
            echo "export NEXT_NAME_VERSION=$NEXT_NAME_VERSION" >> $BASH_ENV
            echo Next version name: $NEXT_NAME_VERSION
      - run:
          name: 'Publish Release on GitHub'
          command: |
            git tag $NEXT_NAME_VERSION $CIRCLE_SHA1
            git remote add by-token "https://$CIRCLE_PROJECT_USERNAME:$GITHUB_TOKEN@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git"
            git push --tags by-token
  
  conventional-commit-lint:
    environment:
      MSG_FILE: /tmp/commit-message-file
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run: 
          name: Installing dependencies
          command: |
            pip install -U --user commitizen
            pip install -U --user .circleci/cz_applada
      - run:
          name: Getting commit message
          command: |
            export COMMIT_MESSAGE=$(git show --pretty='format:%s' --no-patch $CIRCLE_SHA1)
            echo "$COMMIT_MESSAGE" > $MSG_FILE
      - run:
          name: Validating commit message
          command: cz -n cz_applada check --commit-msg-file $MSG_FILE
  
  build-api-docker-image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - run:
          name: 'Getting current version'
          command: |
            CURRENT_VERSION=$(git tag | tail -1 | sed 's/^v//' | sed 's/-release$//')
            echo "export CURRENT_VERSION=$CURRENT_VERSION" >> $BASH_ENV
            echo Current version: $CURRENT_VERSION
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t "$RELEASE_DOCKER_IMAGE:latest" -t "$RELEASE_DOCKER_IMAGE:$CURRENT_VERSION" .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push "$RELEASE_DOCKER_IMAGE:latest"
            docker push "$RELEASE_DOCKER_IMAGE:$CURRENT_VERSION"
  
  rebase-development-branch:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - checkout
      - run:
          name: 'Getting current version'
          command: |
            CURRENT_VERSION=$(git tag | tail -1 | sed 's/^v//' | sed 's/-release$//')
            echo "export CURRENT_VERSION=$CURRENT_VERSION" >> $BASH_ENV
            echo Current version: $CURRENT_VERSION
      - run:
          name: Disable development protection
          command: |
            export PROTECTION_RAW=$(curl -XGET -H "Content-type: application/json" -H "Authorization: token $GITHUB_TOKEN" 'https://api.github.com/repos/Igorxp5/applada-api/branches/development/protection')
            export PROTECTION=$(echo $PROTECTION_RAW | jq -M 'del(.url,.required_status_checks.url,.required_status_checks.contexts_url,.enforce_admins.url,.required_pull_request_reviews.url,.restrictions.url,.restrictions.users_url,.restrictions.teams_url,.restrictions.apps_url) | to_entries | map({"key": .key, "value": (if .value.enabled == null then .value else .value.enabled end)}) | from_entries | . + {"required_pull_request_reviews": .required_pull_request_reviews} | . + {"restrictions": .restrictions}')
            curl -XDELETE -H "Content-type: application/json" -H "Authorization: token $GITHUB_TOKEN" 'https://api.github.com/repos/Igorxp5/applada-api/branches/development/protection'
            echo "export PROTECTION=$PROTECTION" >> $BASH_ENV
      - run:
          name: Delete remote development branch
          command: |
            git remote add by-token "https://$CIRCLE_PROJECT_USERNAME:$GITHUB_TOKEN@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git"
            git push --tags by-token
            git push --delete by-token development | echo 'Development branch has already been deleted'
      - run:
          name: Rebase development branch
          command: |
            git checkout origin/master
            git checkout -b development
      - run:
          name: Publish development branch into GitHub
          command: |
            git push -f -u by-token development
      - run:
          name: Remove debug tag
          command: |
            git push --delete by-token "v$CURRENT_VERSION-debug"
      - run:
          name: Re-enable development protection
          command: |
            curl -XPUT -H "Content-type: application/json" -H "Authorization: token $GITHUB_TOKEN" -d "$PROTECTION" 'https://api.github.com/repos/Igorxp5/applada-api/branches/development/protection'

  update-applada-api-repository:
    docker:
      - image: google/cloud-sdk
    steps: 
      - run: &login_gcloud
          name: Login into Google Cloud
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run: &start_debug_instance
          name: Starting Debug instance
          command: gcloud compute instances start $DEBUG_INSTANCE_NAME
      - run: &get_debug_instance_ip
          name: Getting Debug instance External IP
          command: |
            EXTERNAL_IP=$(gcloud compute instances describe $DEBUG_INSTANCE_NAME --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            echo "export DEBUG_INSTANCE_EXTERNAL_IP=$EXTERNAL_IP" >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
            - "3b:20:f6:44:d6:ca:b2:bf:70:5b:fd:76:89:fd:17:58"
      - run: &ssh_add_debug_to_known_hosts
          name: Add Debug instance to SSH Known Hosts
          command: ssh-keyscan $DEBUG_INSTANCE_EXTERNAL_IP >> ~/.ssh/known_hosts 
      - run:
          name: Fetch updates into remote git repository
          command: |
            ssh $DEBUG_INSTANCE_USER@$DEBUG_INSTANCE_EXTERNAL_IP \
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR fetch origin
      - run:
          name: Pull updates into development branch
          command: |
            ssh $DEBUG_INSTANCE_USER@$DEBUG_INSTANCE_EXTERNAL_IP /bin/bash << EOF
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR checkout development
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR reset HEAD --hard
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR checkout master
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR branch -D development
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR checkout origin/development
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR checkout -b development
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR checkout -- .
            EOF
  
  restart-applada-api-debug:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          <<: *login_gcloud
      - run:
          <<: *start_debug_instance
      - run:
          <<: *get_debug_instance_ip
      - add_ssh_keys:
          fingerprints:
            - "3b:20:f6:44:d6:ca:b2:bf:70:5b:fd:76:89:fd:17:58"
      - run:
          <<: *ssh_add_debug_to_known_hosts
      - run:
          name: Changing current branch to 'development'
          command: |
            ssh $DEBUG_INSTANCE_USER@$DEBUG_INSTANCE_EXTERNAL_IP /bin/bash << EOF
            git --git-dir $DEBUG_INSTANCE_REPOSITORY_DIR/.git --work-tree $DEBUG_INSTANCE_REPOSITORY_DIR checkout development
            EOF
      - run:
          name: Recreate AppLada Debug container
          command: |
            ssh $DEBUG_INSTANCE_USER@$DEBUG_INSTANCE_EXTERNAL_IP /bin/bash << EOF
            docker-compose -f $DEBUG_INSTANCE_REPOSITORY_DIR/docker-compose.yml \
            --env-file $DEBUG_INSTANCE_REPOSITORY_DIR/.env \
            up -d --remove-orphans --force-recreate --no-deps $DEBUG_CONTAINER_NAME
            EOF
  
  rolling-out-api-release:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          <<: *login_gcloud
      - run:
          <<: *start_debug_instance
      - run:
          <<: *get_debug_instance_ip
      - add_ssh_keys:
          fingerprints:
            - "3b:20:f6:44:d6:ca:b2:bf:70:5b:fd:76:89:fd:17:58"
      - run:
          <<: *ssh_add_debug_to_known_hosts
      - run:
          name: Download latest API Docker Image
          command: |
            ssh $DEBUG_INSTANCE_USER@$DEBUG_INSTANCE_EXTERNAL_IP /bin/bash << EOF
            docker pull $RELEASE_DOCKER_IMAGE:latest
            EOF
      - run:
          name: Recreate AppLada Release container
          command: |
            ssh $DEBUG_INSTANCE_USER@$DEBUG_INSTANCE_EXTERNAL_IP /bin/bash << EOF
            docker-compose -f $DEBUG_INSTANCE_REPOSITORY_DIR/docker-compose.yml \
            --env-file $DEBUG_INSTANCE_REPOSITORY_DIR/.env \
            up -d --remove-orphans --force-recreate --no-deps $RELEASE_CONTAINER_NAME
            EOF
      - run:
          name: Remove stopped containers
          command: |
            ssh $DEBUG_INSTANCE_USER@$DEBUG_INSTANCE_EXTERNAL_IP /bin/bash << EOF
            docker rm $(docker ps -a -q) | echo 'No stopped containers to remove'
            EOF
      - run:
          name: Delete <none> docker images
          command: |
            ssh $DEBUG_INSTANCE_USER@$DEBUG_INSTANCE_EXTERNAL_IP /bin/bash << EOF
            docker rmi $(docker images -f 'dangling=true' -q) | echo 'No images to delete'
            EOF
  
workflows:
  version: 2
  workflow:
    jobs:
      - conventional-commit-lint
      - test
      - publish-github-release:
          requires:
            - conventional-commit-lint
            - test
          filters:
            branches:
              only:
                - master
                - development
      - update-applada-api-repository:
          requires:
            - conventional-commit-lint
            - test
          filters:
            branches:
              only:
                - development
      - restart-applada-api-debug:
          requires:
            - update-applada-api-repository
          filters:
            branches:
              only:
                - development
      - rebase-development-branch:
          requires:
            - conventional-commit-lint
            - test
            - publish-github-release
          filters:
            branches:
              only:
                - master
      - build-api-docker-image:
          requires:
            - conventional-commit-lint
            - test
            - publish-github-release
          filters:
            branches:
              only:
                - master
      - rolling-out-api-release:
          requires:
            - build-api-docker-image
          filters:
            branches:
              only:
                - master
